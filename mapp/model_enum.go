// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package mapp

import (
	"errors"
	"fmt"
)

const (
	// FieldTypePrimetive is a FieldType of type Primetive.
	FieldTypePrimetive FieldType = iota
	// FieldTypeStruct is a FieldType of type Struct.
	FieldTypeStruct
	// FieldTypeEnum is a FieldType of type Enum.
	FieldTypeEnum
	// FieldTypeSliceOfStruct is a FieldType of type SliceOfStruct.
	FieldTypeSliceOfStruct
	// FieldTypeSliceOfPrimetive is a FieldType of type SliceOfPrimetive.
	FieldTypeSliceOfPrimetive
	// FieldTypePointerToPrimetive is a FieldType of type PointerToPrimetive.
	FieldTypePointerToPrimetive
	// FieldTypePointerToStruct is a FieldType of type PointerToStruct.
	FieldTypePointerToStruct
)

var ErrInvalidFieldType = errors.New("not a valid FieldType")

const _FieldTypeName = "PrimetiveStructEnumSliceOfStructSliceOfPrimetivePointerToPrimetivePointerToStruct"

var _FieldTypeMap = map[FieldType]string{
	FieldTypePrimetive:          _FieldTypeName[0:9],
	FieldTypeStruct:             _FieldTypeName[9:15],
	FieldTypeEnum:               _FieldTypeName[15:19],
	FieldTypeSliceOfStruct:      _FieldTypeName[19:32],
	FieldTypeSliceOfPrimetive:   _FieldTypeName[32:48],
	FieldTypePointerToPrimetive: _FieldTypeName[48:66],
	FieldTypePointerToStruct:    _FieldTypeName[66:81],
}

// String implements the Stringer interface.
func (x FieldType) String() string {
	if str, ok := _FieldTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FieldType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FieldType) IsValid() bool {
	_, ok := _FieldTypeMap[x]
	return ok
}

var _FieldTypeValue = map[string]FieldType{
	_FieldTypeName[0:9]:   FieldTypePrimetive,
	_FieldTypeName[9:15]:  FieldTypeStruct,
	_FieldTypeName[15:19]: FieldTypeEnum,
	_FieldTypeName[19:32]: FieldTypeSliceOfStruct,
	_FieldTypeName[32:48]: FieldTypeSliceOfPrimetive,
	_FieldTypeName[48:66]: FieldTypePointerToPrimetive,
	_FieldTypeName[66:81]: FieldTypePointerToStruct,
}

// ParseFieldType attempts to convert a string to a FieldType.
func ParseFieldType(name string) (FieldType, error) {
	if x, ok := _FieldTypeValue[name]; ok {
		return x, nil
	}
	return FieldType(0), fmt.Errorf("%s is %w", name, ErrInvalidFieldType)
}
