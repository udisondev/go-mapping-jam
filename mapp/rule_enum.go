// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package mapp

import (
	"errors"
	"fmt"
)

const (
	// RuleArgSource is a RuleArg of type Source.
	RuleArgSource RuleArg = iota
	// RuleArgTarget is a RuleArg of type Target.
	RuleArgTarget
	// RuleArgMname is a RuleArg of type Mname.
	RuleArgMname
	// RuleArgMpath is a RuleArg of type Mpath.
	RuleArgMpath
)

var ErrInvalidRuleArg = errors.New("not a valid RuleArg")

const _RuleArgName = "sourcetargetmnamempath"

var _RuleArgMap = map[RuleArg]string{
	RuleArgSource: _RuleArgName[0:6],
	RuleArgTarget: _RuleArgName[6:12],
	RuleArgMname:  _RuleArgName[12:17],
	RuleArgMpath:  _RuleArgName[17:22],
}

// String implements the Stringer interface.
func (x RuleArg) String() string {
	if str, ok := _RuleArgMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RuleArg(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RuleArg) IsValid() bool {
	_, ok := _RuleArgMap[x]
	return ok
}

var _RuleArgValue = map[string]RuleArg{
	_RuleArgName[0:6]:   RuleArgSource,
	_RuleArgName[6:12]:  RuleArgTarget,
	_RuleArgName[12:17]: RuleArgMname,
	_RuleArgName[17:22]: RuleArgMpath,
}

// ParseRuleArg attempts to convert a string to a RuleArg.
func ParseRuleArg(name string) (RuleArg, error) {
	if x, ok := _RuleArgValue[name]; ok {
		return x, nil
	}
	return RuleArg(0), fmt.Errorf("%s is %w", name, ErrInvalidRuleArg)
}

const (
	// RuleTypeQual is a RuleType of type Qual.
	RuleTypeQual RuleType = iota
	// RuleTypeIgnore is a RuleType of type Ignore.
	RuleTypeIgnore
)

var ErrInvalidRuleType = errors.New("not a valid RuleType")

const _RuleTypeName = "qualignore"

var _RuleTypeMap = map[RuleType]string{
	RuleTypeQual:   _RuleTypeName[0:4],
	RuleTypeIgnore: _RuleTypeName[4:10],
}

// String implements the Stringer interface.
func (x RuleType) String() string {
	if str, ok := _RuleTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RuleType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RuleType) IsValid() bool {
	_, ok := _RuleTypeMap[x]
	return ok
}

var _RuleTypeValue = map[string]RuleType{
	_RuleTypeName[0:4]:  RuleTypeQual,
	_RuleTypeName[4:10]: RuleTypeIgnore,
}

// ParseRuleType attempts to convert a string to a RuleType.
func ParseRuleType(name string) (RuleType, error) {
	if x, ok := _RuleTypeValue[name]; ok {
		return x, nil
	}
	return RuleType(0), fmt.Errorf("%s is %w", name, ErrInvalidRuleType)
}
