// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"errors"
	"fmt"
)

const (
	// StructType is a FieldType of type StructType.
	StructType FieldType = iota
	// PrimetiveType is a FieldType of type PrimetiveType.
	PrimetiveType
	// StructSliceType is a FieldType of type StructSliceType.
	StructSliceType
	// PrimetiveSliceType is a FieldType of type PrimetiveSliceType.
	PrimetiveSliceType
	// PointerType is a FieldType of type PointerType.
	PointerType
)

var ErrInvalidFieldType = errors.New("not a valid FieldType")

const _FieldTypeName = "StructTypePrimetiveTypeStructSliceTypePrimetiveSliceTypePointerType"

var _FieldTypeMap = map[FieldType]string{
	StructType:         _FieldTypeName[0:10],
	PrimetiveType:      _FieldTypeName[10:23],
	StructSliceType:    _FieldTypeName[23:38],
	PrimetiveSliceType: _FieldTypeName[38:56],
	PointerType:        _FieldTypeName[56:67],
}

// String implements the Stringer interface.
func (x FieldType) String() string {
	if str, ok := _FieldTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FieldType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FieldType) IsValid() bool {
	_, ok := _FieldTypeMap[x]
	return ok
}

var _FieldTypeValue = map[string]FieldType{
	_FieldTypeName[0:10]:  StructType,
	_FieldTypeName[10:23]: PrimetiveType,
	_FieldTypeName[23:38]: StructSliceType,
	_FieldTypeName[38:56]: PrimetiveSliceType,
	_FieldTypeName[56:67]: PointerType,
}

// ParseFieldType attempts to convert a string to a FieldType.
func ParseFieldType(name string) (FieldType, error) {
	if x, ok := _FieldTypeValue[name]; ok {
		return x, nil
	}
	return FieldType(0), fmt.Errorf("%s is %w", name, ErrInvalidFieldType)
}
