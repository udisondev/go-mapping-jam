// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package rule

import (
	"errors"
	"fmt"
)

const (
	// TypeQual is a Type of type Qual.
	TypeQual Type = iota
	// TypeEnum is a Type of type Enum.
	TypeEnum
)

var ErrInvalidType = errors.New("not a valid Type")

const _TypeName = "qualenum"

var _TypeMap = map[Type]string{
	TypeQual: _TypeName[0:4],
	TypeEnum: _TypeName[4:8],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:4]: TypeQual,
	_TypeName[4:8]: TypeEnum,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}
